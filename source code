The link dor the dataset is mentioned in the README.md

import os
import numpy as np
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from keras.models import load_model

# Define image size and directories
img_width, img_height = 150, 150
train_data_dir = "C:\\Users\\mahes\\Desktop\\pest\\train" #update the file location 

# Data augmentation
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, validation_split=0.2)

train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=32,
    class_mode='categorical',
    subset='training')

validation_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=32,
    class_mode='categorical',
    subset='validation')

# Build the model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(img_width, img_height, 3)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(32, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(9, activation='softmax')
])

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(train_generator, steps_per_epoch=len(train_generator), epochs=50, validation_data=validation_generator, validation_steps=len(validation_generator))

# Save the model
model.save('pest_detection_model.h5')

# Load the model and predict on user input image
model = load_model('pest_detection_model.h5')

def predict_image(image_path):
    image = load_img(image_path, target_size=(img_width, img_height))
    image = img_to_array(image)
    image = np.expand_dims(image, axis=0)
    image /= 255.

    prediction = model.predict(image)
    classes = train_generator.class_indices
    class_labels = list(classes.keys())
    
    predicted_class = class_labels[np.argmax(prediction)]
    return predicted_class

# Predict on the input image
input_image_path = "C:\\Users\\mahes\\Desktop\\pest\\test\\mosquito\\jpg_11.jpg" #update the file location which need to be predicted
result = predict_image(input_image_path)
print(f"Detected pest: {result}")
